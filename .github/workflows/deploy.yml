name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  REGISTRY_NAME: acrthrower360back
  IMAGE_NAME: thrower-360-back
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Job para validar Terraform em PRs
  terraform-plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="environment=dev" \
          -var="container_image_tag=${{ github.sha }}" \
          -var="mongodb_uri=${{ secrets.MONGODB_URI }}" \
          -out=tfplan

    - name: Comment PR with Plan
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('./terraform/tfplan', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Terraform Plan\n\`\`\`\n${plan}\n\`\`\``
          });

  # Job para build e deploy em desenvolvimento
  deploy-dev:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="environment=dev" \
          -var="container_image_tag=${{ github.sha }}" \
          -var="mongodb_uri=${{ secrets.MONGODB_URI }}"

    - name: Get Container Registry info
      id: acr-info
      working-directory: ./terraform
      run: |
        echo "login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
        echo "username=$(terraform output -raw container_registry_admin_username)" >> $GITHUB_OUTPUT
        echo "password=$(terraform output -raw container_registry_admin_password)" >> $GITHUB_OUTPUT

    - name: Docker Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.acr-info.outputs.login_server }}
        username: ${{ steps.acr-info.outputs.username }}
        password: ${{ steps.acr-info.outputs.password }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Update Container App
      run: |
        az containerapp update \
          --name $(terraform output -raw container_app_name) \
          --resource-group $(terraform output -raw resource_group_name) \
          --image ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      working-directory: ./terraform

  # Job para deploy em produção
  deploy-prod:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="environment=prod" \
          -var="container_image_tag=${{ github.sha }}" \
          -var="mongodb_uri=${{ secrets.MONGODB_URI_PROD }}"

    - name: Get Container Registry info
      id: acr-info
      working-directory: ./terraform
      run: |
        echo "login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
        echo "username=$(terraform output -raw container_registry_admin_username)" >> $GITHUB_OUTPUT
        echo "password=$(terraform output -raw container_registry_admin_password)" >> $GITHUB_OUTPUT

    - name: Docker Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.acr-info.outputs.login_server }}
        username: ${{ steps.acr-info.outputs.username }}
        password: ${{ steps.acr-info.outputs.password }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Update Container App
      run: |
        az containerapp update \
          --name $(terraform output -raw container_app_name) \
          --resource-group $(terraform output -raw resource_group_name) \
          --image ${{ steps.acr-info.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      working-directory: ./terraform
