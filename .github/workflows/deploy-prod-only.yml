name: Deploy to Azure Production

on:
  push:
    branches: [main]

concurrency:
  group: deploy-production
  cancel-in-progress: true

env:
  IMAGE_NAME: thrower360

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Register Azure providers
      run: |
        echo "Registering Azure providers..."
        az provider register --namespace Microsoft.App --wait
        az provider register --namespace Microsoft.ContainerRegistry --wait
        az provider register --namespace Microsoft.OperationalInsights --wait
        echo "Waiting for provider registration to propagate..."
        sleep 30

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    # STEP 1: Create base infrastructure (ACR, etc.)
    - name: Terraform Init (Infrastructure)
      working-directory: ./terraform/01-infrastructure
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Plan (Infrastructure)
      working-directory: ./terraform/01-infrastructure
      run: |
        terraform plan \
          -var="environment=prod" \
          -var="location=Brazil South" \
          -var="container_image_tag=${{ github.sha }}" \
          -out=tfplan-infra
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Import existing resources if needed
      working-directory: ./terraform/01-infrastructure
      run: |
        echo "Checking and importing existing resources..."
        
        # Function to safely import resource
        safe_import() {
          local resource_name="$1"
          local resource_id="$2"
          
          if terraform state show "$resource_name" >/dev/null 2>&1; then
            echo "✅ $resource_name already in state"
          else
            echo "📥 Importing $resource_name..."
            terraform import "$resource_name" "$resource_id" || echo "⚠️ Import failed for $resource_name (may not exist)"
          fi
        }
        
        # Get subscription ID
        SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        
        # Import resources if they exist
        safe_import "azurerm_cosmosdb_account.mongodb" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.DocumentDB/databaseAccounts/cosmos-thrower360-prod"
        safe_import "azurerm_cosmosdb_mongo_database.main" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.DocumentDB/databaseAccounts/cosmos-thrower360-prod/mongodbDatabases/thrower360db"
        safe_import "azurerm_cosmosdb_mongo_collection.pregoes" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.DocumentDB/databaseAccounts/cosmos-thrower360-prod/mongodbDatabases/thrower360db/collections/pregoes"
        safe_import "azurerm_cosmosdb_mongo_collection.pregao_detalhes" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.DocumentDB/databaseAccounts/cosmos-thrower360-prod/mongodbDatabases/thrower360db/collections/pregaodetalhes"
        safe_import "azurerm_container_registry.main" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.ContainerRegistry/registries/acrthrower360prod"
        safe_import "azurerm_log_analytics_workspace.main" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.OperationalInsights/workspaces/law-thrower360-prod"
        safe_import "azurerm_container_app_environment.main" "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-thrower360-prod/providers/Microsoft.App/managedEnvironments/cae-thrower360-prod"
        
        echo "✅ Import process completed"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Plan (Infrastructure - After Import)
      working-directory: ./terraform/01-infrastructure
      run: |
        echo "🔄 Re-planning after imports..."
        terraform plan \
          -var="environment=prod" \
          -var="location=Brazil South" \
          -var="container_image_tag=${{ github.sha }}" \
          -out=tfplan-infra
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Apply (Infrastructure)
      working-directory: ./terraform/01-infrastructure
      run: terraform apply -auto-approve tfplan-infra
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Get ACR details
      id: acr-details
      working-directory: ./terraform/01-infrastructure
      run: |
        ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
        ACR_USERNAME=$(terraform output -raw container_registry_admin_username)
        ACR_PASSWORD=$(terraform output -raw container_registry_admin_password)
        
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    # STEP 2: Build and push Docker image
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.acr-details.outputs.acr_login_server }}
        username: ${{ steps.acr-details.outputs.acr_username }}
        password: ${{ steps.acr-details.outputs.acr_password }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ steps.acr-details.outputs.acr_login_server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ steps.acr-details.outputs.acr_login_server }}/${{ env.IMAGE_NAME }}:latest

    # STEP 3: Create Container App now that image exists
    - name: Terraform Init (Container App)
      working-directory: ./terraform/02-container-app
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Plan (Container App)
      working-directory: ./terraform/02-container-app
      run: |
        terraform plan \
          -var="environment=prod" \
          -var="location=Brazil South" \
          -var="container_image_tag=${{ github.sha }}" \
          -out=tfplan-app
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Apply (Container App)
      working-directory: ./terraform/02-container-app
      run: terraform apply -auto-approve tfplan-app
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Get Container App URL
      working-directory: ./terraform/02-container-app
      run: |
        APP_URL=$(terraform output -raw container_app_url)
        echo "🚀 Container App deployed at: $APP_URL"
        echo "::notice title=Deployment Success::Container App deployed at $APP_URL"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
